// column layouts
// http://csswizardry.com/2013/02/responsive-grid-systems-a-solution/

/*!
 * 0. false will set the grid elements to inline-block if true flexbox
 * 1. size of the gutter between the cols
 * 2. the gutter between the columns can be padding or margin
 * 3. the gutter can be on the right or the left side of every col
 * 4. Provides additional classes for the grid in order have different available gutter sizes
 * 5. Base font size used for the in-line-block gap fix: http://css-tricks.com/fighting-the-space-between-inline-block-elements/
 * 6. Slug used for the grid classes (l- for SMACSS layout), empty string for no slug
 * 7. If set to true, one push class per with will be available (margin-left)
 * 8. Generated col names & withs
 * 9. Breakpoints used in the grid (ideally reduced to a minimum)
 * 10. To avoid breaking the grid on Blackberry and some Firefox version you can set a rounding. 50% will be 50% - $rounding etc.. Set this to 0 if you don't need it.
 */

@mixin sensibleGrid (
    $modern: false,                     /* [0] */
    $gutter: 20px,                      /* [1] */
    $gutterType: padding,               /* [2] */
    $gutterDirection: "right",          /* [3] */
    $gutterModifiers: (                 /* [4] */
        "no-gap"            : 0px,
        "double"            : 40px,
        "triple"            : 60px
    ),
    $base-font-size: 16px,              /* [5] */
    $slug: "l-",                        /* [6] */
    $pushClasses: false,                /* [7] */
    $gridWidths: (                      /* [8] */
        "one-whole"         : 100%,
        "one-half"          : 50%,
        "one-quarter"       : 25%,
        "three-quarters"    : 75%,
        "one-third"         : 33.333%,
        "two-thirds"        : 66.666%,
        "one-fifth"         : 20%,
        "four-fifths"       : 80%,
        "one-sixth"         : 16.666%,
        "five-sixths"       : 83.333%
    ),
    $gridBreakpoints: "not-tablet" "tablet" "tablet-portrait" "not-mobile" "mobile" "mobile-portrait" "print", /* [9] */
    $rounding: 0.0095%                   /* [10] */
) {

    //rounding is not an issue with flexbox
    @if $modern {
        $rounding: 0;
    }

    //class that wraps a grid cols
    %#{$slug}grid,
    .#{$slug}grid {

        @if $modern {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
        } @else {
            //fixes the webkit inline-block issue
            font-size: 0.1px;
        }

        margin-#{$gutterDirection}: -$gutter;
        margin-#{$gutterDirection}: calc( -#{$gutter} + #{-1px} );

        %#{$slug}grid-cell,
        .#{$slug}grid-cell {
            //cells only have a gutter inside the grid
            #{$gutterType}-#{$gutterDirection}: $gutter;

            @if $modern == false {
                font-size: $base-font-size;
            } @else {
                display: block;
            }
        }

        @if $gutterModifiers != false {
            @each $gutterModifier, $newGutter in $gutterModifiers {
               &--#{$gutterModifier} {
                    margin-#{$gutterDirection}: -$newGutter;
                    margin-#{$gutterDirection}: calc( -#{$newGutter} + #{-1px} );
                    
                    @if $modern == false {
                        font-size: $base-font-size;
                    } @else {
                        display: block;
                    }
                    
                    %#{$slug}grid-cell,
                    .#{$slug}grid-cell {
                        #{$gutterType}-#{$gutterDirection}: $newGutter;
                    }
               }
            }
        }

        &--gapped {
            & > %#{$slug}grid-cell,
            & > .#{$slug}grid-cell {
                #{$gutterType}-bottom: $gutter;
            }
        }

    }

    %#{$slug}grid-cell,
    .#{$slug}grid-cell {
        display: inline-block;
        vertical-align: top;
        box-sizing: border-box;
    }

    //includes the default classes
    @include sensibleGridClasses($device: false, $slug: $slug, $pushClasses: $pushClasses, $gridWidths: $gridWidths, $gutterType: $gutterType, $gutter: $gutter, $rounding: $rounding);

    //includes the classes for the bereakpoints listed in $gridbreakpoints
    @each $breakpoint in $gridBreakpoints {
        @include breakpoint( $breakpoint ) {
            @include sensibleGridClasses( $device: $breakpoint, $slug: $slug, $pushClasses: $pushClasses, $gridWidths: $gridWidths, $gutterType: $gutterType, $gutter: $gutter, $rounding: $rounding);
        }
    }
}

// generate classes for grid cells
@mixin sensibleGridClasses (
    $device: false,
    $slug: "l-",
    $pushClasses: false,
    $gridWidths: (
        "one-whole"         : 100%,
        "one-half"          : 50%,
        "one-quarter"       : 25%,
        "three-quarters"    : 75%
    ),
    $gutterType: padding,
    $gutter: 20px,
    $rounding: 0
) {
    $deviceString: null;

    @if $device {
        $deviceString: "#{$device}-";
    }

    // loops the $gridWiths map
    @each $gridWidth, $width in $gridWidths {

        $width: $width / 10% * (10% - $rounding);

        %#{$slug}#{$deviceString}#{$gridWidth},
        .#{$slug}#{$deviceString}#{$gridWidth} {
            width: $width;
        }
        @if $pushClasses {
            %#{$slug}push-#{$deviceString}#{$gridWidth},
            .#{$slug}push-#{$deviceString}#{$gridWidth}{
                margin-left: $width;
            }
        }
    }

    @if $gutterType == margin {
        @each $gridWidth, $width in $gridWidths {
            $width: $width / 10% * (10% - $rounding);
            %#{$slug}grid,
            .#{$slug}grid {
                & > %#{$slug}#{$deviceString}#{$gridWidth},
                & > .#{$slug}#{$deviceString}#{$gridWidth} {
                    width: calc(#{$width} - #{$gutter});
                }
            }
        }
    }
}
